// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case AWS_ACCESS_KEY_ID = "AWS_ACCESS_KEY_ID"
    case AWS_DEFAULT_REGION = "AWS_DEFAULT_REGION"
    case AWS_SECRET_ACCESS_KEY = "AWS_SECRET_ACCESS_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .AWS_ACCESS_KEY_ID: (
            data: [
                0xDE, 0x34, 0x98, 0x4A, 0x52, 0xAE, 0x3E, 0xC4,
                0x71, 0xD2, 0x39, 0xFE, 0xF0, 0xEF, 0x11, 0xB7,
                0xFC, 0xE4, 0xCB, 0x59
            ],
            nonce: [
                0x32, 0x59, 0xA0, 0xA4, 0x98, 0x4A, 0x0F, 0x53,
                0x72, 0x83, 0x67, 0x90
            ],
            tag: [
                0x1A, 0x98, 0xFB, 0x96, 0xAD, 0x12, 0x51, 0xD4,
                0xE3, 0xB1, 0xDF, 0xD7, 0x45, 0x6C, 0x61, 0x74
            ]
        ),
        .AWS_DEFAULT_REGION: (
            data: [
                0x55, 0xCB, 0x18, 0xCF, 0x43, 0x3D, 0xA9, 0x43,
                0x31
            ],
            nonce: [
                0x3F, 0x33, 0x0E, 0xB7, 0x91, 0x18, 0x30, 0xF8,
                0x4C, 0x11, 0x03, 0xA7
            ],
            tag: [
                0xDD, 0x5C, 0x4A, 0x19, 0x64, 0xCE, 0xA7, 0x3F,
                0x3E, 0x12, 0x2B, 0x68, 0x22, 0x7A, 0x0E, 0xD3
            ]
        ),
        .AWS_SECRET_ACCESS_KEY: (
            data: [
                0x77, 0xD5, 0x4F, 0xA3, 0xEC, 0xBE, 0x31, 0x83,
                0xCE, 0x0E, 0x3C, 0x82, 0x1D, 0xE1, 0xAD, 0x19,
                0xC8, 0x6B, 0xF1, 0xA7, 0x33, 0x96, 0x25, 0xB3,
                0xCA, 0xDE, 0x01, 0x72, 0xF5, 0x99, 0xE0, 0xFC,
                0x29, 0x17, 0x45, 0x1A, 0x66, 0xB2, 0xEE, 0x55
            ],
            nonce: [
                0xD7, 0xE4, 0x08, 0x43, 0xB1, 0x03, 0x7D, 0xC0,
                0x8E, 0xD1, 0x8A, 0x59
            ],
            tag: [
                0xF4, 0x09, 0x0C, 0x3B, 0xE3, 0xB1, 0x9B, 0xF6,
                0x5D, 0x9C, 0xBF, 0x52, 0xAA, 0x0B, 0x23, 0xC3
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0x7F, 0x61, 0x3F, 0xC1],
        [0x82, 0x30, 0xEF, 0x28],
        [0x4F, 0x0C, 0x0D, 0xD6],
        [0xCF, 0x88, 0x54, 0xFE],
        [0x90, 0xFB, 0x63, 0x0D],
        [0xCB, 0xD7, 0xED, 0x27],
        [0x86, 0xF7, 0x85, 0x56],
        [0x07, 0x9D, 0x11, 0x8E],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}