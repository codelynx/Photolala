// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case AWS_ACCESS_KEY_ID = "AWS_ACCESS_KEY_ID"
    case AWS_DEFAULT_REGION = "AWS_DEFAULT_REGION"
    case AWS_SECRET_ACCESS_KEY = "AWS_SECRET_ACCESS_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .AWS_ACCESS_KEY_ID: (
            data: [
                0x98, 0x97, 0xBC, 0xE3, 0xB8, 0x65, 0xA8, 0x10,
                0xC3, 0xA2, 0x1B, 0xB1, 0x29, 0xDA, 0xF6, 0x5D,
                0xAA, 0x67, 0x0F, 0x2C
            ],
            nonce: [
                0x18, 0xFA, 0x3C, 0x74, 0x81, 0x9D, 0xB0, 0x53,
                0x82, 0xBE, 0x4A, 0x8A
            ],
            tag: [
                0x5B, 0xBC, 0xDE, 0x17, 0x24, 0xF7, 0x63, 0xE3,
                0x6D, 0xF3, 0xA0, 0x46, 0x59, 0xA6, 0x72, 0x8B
            ]
        ),
        .AWS_DEFAULT_REGION: (
            data: [
                0x6D, 0x28, 0x7E, 0x05, 0x83, 0x98, 0x8C, 0xEF,
                0x74
            ],
            nonce: [
                0xCD, 0xFF, 0x09, 0x46, 0xCC, 0x37, 0x2F, 0xD3,
                0xFB, 0x4B, 0x40, 0xF2
            ],
            tag: [
                0xE4, 0xE1, 0xC9, 0x3D, 0x28, 0x58, 0x72, 0x34,
                0x30, 0xAB, 0xD4, 0x98, 0x34, 0xE3, 0x53, 0xE1
            ]
        ),
        .AWS_SECRET_ACCESS_KEY: (
            data: [
                0x08, 0x0B, 0xB0, 0x71, 0x1B, 0x8B, 0x0B, 0xC1,
                0xDC, 0x10, 0x74, 0x26, 0x07, 0x73, 0xB5, 0x44,
                0x18, 0x39, 0x36, 0x5F, 0x99, 0x07, 0x63, 0x9F,
                0xD1, 0x86, 0x0D, 0x3F, 0xEC, 0x06, 0x71, 0xA2,
                0xDC, 0x06, 0x51, 0x73, 0x7F, 0x22, 0x3A, 0x78
            ],
            nonce: [
                0x48, 0x66, 0xF9, 0x79, 0x51, 0x11, 0x2A, 0x2B,
                0x22, 0x9D, 0x9F, 0x49
            ],
            tag: [
                0xD7, 0xAD, 0x66, 0x3C, 0x8D, 0x31, 0x8E, 0xA5,
                0x91, 0xD5, 0x4D, 0x39, 0xDF, 0x15, 0x34, 0x0E
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0x74, 0x1B, 0xE7, 0x2E],
        [0x50, 0x6C, 0x58, 0x5D],
        [0x07, 0xB4, 0xA2, 0x0F],
        [0xD6, 0xBA, 0x8A, 0x98],
        [0x93, 0xAF, 0xC7, 0x2A],
        [0xEA, 0x42, 0xF8, 0xB8],
        [0x5C, 0xBD, 0x4D, 0xC8],
        [0x73, 0xD1, 0x2A, 0x06],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}