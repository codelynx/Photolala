// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case APPLE_PRIVATE_KEY = "APPLE_PRIVATE_KEY"
    case AWS_ACCESS_KEY_ID = "AWS_ACCESS_KEY_ID"
    case AWS_DEFAULT_REGION = "AWS_DEFAULT_REGION"
    case AWS_SECRET_ACCESS_KEY = "AWS_SECRET_ACCESS_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .APPLE_PRIVATE_KEY: (
            data: [
                0x1B, 0x28, 0xD2, 0x12, 0x55, 0x2A, 0x5D, 0x16,
                0xFE, 0xA7, 0x62, 0x8C, 0x9F, 0xE3, 0xE2, 0x0C,
                0x59, 0xD3, 0x40, 0xF9, 0x41, 0x76, 0xA6, 0xA8,
                0xD1, 0x39, 0x5A, 0x12, 0xB5, 0x46, 0x40, 0x4C,
                0xE2, 0xFC, 0xCB, 0xF7, 0x99, 0xF4, 0x07, 0x8D,
                0x59, 0x27, 0xCC, 0x83, 0x72, 0xBC, 0x55, 0x12,
                0xC0, 0xEA, 0x5F, 0x38, 0xCC, 0x99, 0xC9, 0xD9,
                0x3C, 0xFC, 0x86, 0x50, 0x74, 0x29, 0x86, 0xAF,
                0xC3, 0xDC, 0x07, 0xD1, 0x5F, 0x42, 0x6A, 0x77,
                0x55, 0x53, 0x80, 0x6F, 0x66, 0xBF, 0x15, 0x65,
                0x27, 0xA0, 0x9A, 0x21, 0xB9, 0xF5, 0x6C, 0x35,
                0xEB, 0xC7, 0xE1, 0x37, 0x31, 0x5F, 0x3E, 0xAA,
                0x24, 0x9C, 0xFD, 0x54, 0x5B, 0x09, 0x24, 0xCC,
                0xD4, 0x5C, 0x7D, 0x94, 0xF7, 0x33, 0xD5, 0xA7,
                0xC4, 0xF4, 0xFE, 0x9F, 0xF5, 0x0E, 0x3C, 0x4D,
                0x8B, 0x6B, 0x16, 0xFC, 0xF7, 0x9D, 0x9E, 0xE5,
                0x69, 0xB7, 0xE8, 0xDD, 0xCB, 0x47, 0x4C, 0x8E,
                0x3F, 0xB3, 0x66, 0xB0, 0xF3, 0x8F, 0x3E, 0x0F,
                0x53, 0x34, 0x6C, 0x32, 0x4F, 0x35, 0x33, 0x89,
                0xDA, 0x36, 0xFD, 0x3B, 0x04, 0x9C, 0x25, 0xF2,
                0xD1, 0x82, 0xEC, 0xE5, 0x77, 0x53, 0x79, 0x42,
                0xA1, 0x34, 0x92, 0x0C, 0xF2, 0xB9, 0x27, 0x3D,
                0xD8, 0xE6, 0xDF, 0x8E, 0x95, 0x3F, 0x0D, 0x78,
                0x11, 0xAB, 0x61, 0xF9, 0xB3, 0x49, 0x4D, 0x35,
                0x96, 0x34, 0x40, 0x1A, 0x2C, 0x42, 0x1F, 0xD6,
                0x39, 0x3D, 0xF5, 0x9A, 0xC4, 0x7C, 0x2D, 0xF5,
                0x01, 0x18, 0x9B, 0x96, 0xAE, 0x32, 0xDD, 0x17,
                0x59, 0xFE, 0xA5, 0xD2, 0x54, 0x88, 0x14, 0x85,
                0xE6, 0x87, 0x41, 0x2D, 0x0B, 0x65, 0x06, 0xF1,
                0x45, 0x6D, 0x4B, 0xA1, 0xB3, 0xA7, 0x19, 0x3E,
                0xD7, 0xE7, 0x2F, 0x5A, 0x22, 0x0C, 0xA2, 0xC6,
                0xEF, 0xA1, 0xA2, 0x53, 0x05, 0x6E, 0xF2, 0x61,
                0x80
            ],
            nonce: [
                0x7E, 0x95, 0x30, 0xF9, 0x56, 0x47, 0x9C, 0xE4,
                0x28, 0x22, 0x84, 0x77
            ],
            tag: [
                0x94, 0xDE, 0xC2, 0xC9, 0x63, 0xFC, 0x6D, 0x59,
                0x28, 0xAC, 0x94, 0xDF, 0xB1, 0xE9, 0x82, 0x00
            ]
        ),
        .AWS_ACCESS_KEY_ID: (
            data: [
                0x57, 0xF0, 0xA4, 0x8E, 0xB7, 0x8E, 0xE5, 0x7D,
                0xB1, 0x68, 0xED, 0x4D, 0x81, 0x47, 0x03, 0xCF,
                0x4B, 0x3C, 0x8F, 0x8D
            ],
            nonce: [
                0x3A, 0x9D, 0xCF, 0x1B, 0xAD, 0x7D, 0x5C, 0x46,
                0x45, 0x0C, 0x72, 0x1E
            ],
            tag: [
                0xD8, 0xCB, 0x5A, 0x16, 0xFF, 0x3D, 0x37, 0xA1,
                0xBC, 0x16, 0x55, 0x7A, 0x91, 0xFB, 0x39, 0x70
            ]
        ),
        .AWS_DEFAULT_REGION: (
            data: [
                0x1D, 0x02, 0x37, 0x0C, 0x7C, 0x4C, 0xF1, 0xCC,
                0x3A
            ],
            nonce: [
                0xF3, 0x4D, 0xC2, 0xCC, 0x5E, 0x5B, 0x6E, 0x0C,
                0x36, 0xBD, 0x41, 0xC6
            ],
            tag: [
                0xF0, 0xD9, 0x89, 0x14, 0x5B, 0x4B, 0x97, 0x62,
                0x98, 0x52, 0x08, 0x57, 0x0E, 0x8F, 0x15, 0x8C
            ]
        ),
        .AWS_SECRET_ACCESS_KEY: (
            data: [
                0x80, 0x59, 0x7B, 0xC0, 0x47, 0x57, 0x0D, 0x43,
                0xAE, 0x26, 0x1A, 0x89, 0x2C, 0x59, 0x0F, 0x34,
                0xD4, 0x7A, 0x8A, 0x3C, 0xBD, 0x7C, 0x57, 0xD0,
                0x49, 0x62, 0x49, 0x8E, 0x5E, 0x83, 0x90, 0x84,
                0x00, 0xAE, 0x49, 0x80, 0x09, 0x12, 0xEE, 0x49
            ],
            nonce: [
                0x82, 0x59, 0x07, 0x3A, 0x41, 0x86, 0xE4, 0x9A,
                0x71, 0xA8, 0x9A, 0x5B
            ],
            tag: [
                0x33, 0x0E, 0x3F, 0x8F, 0xC0, 0xE3, 0x38, 0xA6,
                0xBF, 0xB3, 0x32, 0x75, 0x3C, 0x96, 0x1D, 0x28
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0xB0, 0x81, 0xF3, 0x85],
        [0xF2, 0x57, 0xA5, 0xDA],
        [0x01, 0xDE, 0x11, 0x32],
        [0xF3, 0xB1, 0x49, 0x1E],
        [0x7D, 0x61, 0xFE, 0x66],
        [0x0A, 0x4F, 0x1D, 0xC2],
        [0xB1, 0xB5, 0x51, 0x40],
        [0x48, 0x9C, 0x0E, 0xDE],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}