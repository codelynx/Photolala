// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

package com.example.credentials

import javax.crypto.Cipher
import javax.crypto.spec.GCMParameterSpec
import javax.crypto.spec.SecretKeySpec

enum class CredentialKey {
    APPLE_BUNDLE_ID,
    APPLE_CLIENT_ID,
    APPLE_KEY_ID,
    APPLE_PRIVATE_KEY,
    APPLE_TEAM_ID,
    AWS_ACCESS_KEY_ID_DEV,
    AWS_ACCESS_KEY_ID_PROD,
    AWS_ACCESS_KEY_ID_STAGE,
    AWS_REGION,
    AWS_SECRET_ACCESS_KEY_DEV,
    AWS_SECRET_ACCESS_KEY_PROD,
    AWS_SECRET_ACCESS_KEY_STAGE,
}

object Credentials {
    private data class EncryptedData(
        val data: ByteArray,
        val nonce: ByteArray,
        val tag: ByteArray
    )
    
    // Encrypted credential data as byte arrays
    private val encryptedData = mapOf(
        CredentialKey.APPLE_BUNDLE_ID to EncryptedData(
            data = byteArrayOf(
                0x52, 0x03, 0x7A, 0x20, 0x33, -53, -30, -55,
                -127, 0x5E, 0x0A, -78, 0x14, 0x47, 0x61, 0x7F,
                0x4E, 0x40, -38, 0x58, 0x62, -81, 0x0C, -59,
                0x73, 0x4D, -68
            ),
            nonce = byteArrayOf(
                -65, -68, -77, 0x48, 0x0A, -119, -99, -83,
                -32, 0x1D, 0x13, -36
            ),
            tag = byteArrayOf(
                -117, -5, -99, -44, 0x16, -47, -84, 0x52,
                0x3D, 0x72, 0x2B, -24, -67, 0x58, 0x10, -79
            )
        ),
        CredentialKey.APPLE_CLIENT_ID to EncryptedData(
            data = byteArrayOf(
                -36, 0x59, 0x4C, 0x18, -46, 0x24, 0x0E, -127,
                -71, -78, -20, -45, -84, -12, 0x39, 0x0F,
                -86, 0x4F, 0x72, -115, 0x0C, 0x6C, -79, 0x05,
                0x61, -33, -52, -128, -1, 0x1E, 0x76, -73,
                -90, 0x09, -49
            ),
            nonce = byteArrayOf(
                0x72, 0x36, -117, 0x5F, 0x10, 0x64, -90, 0x0B,
                0x15, -49, 0x5B, 0x6E
            ),
            tag = byteArrayOf(
                0x4C, 0x03, 0x7D, -7, -29, -97, 0x33, 0x45,
                0x16, 0x18, -125, -68, 0x40, 0x56, -48, 0x2A
            )
        ),
        CredentialKey.APPLE_KEY_ID to EncryptedData(
            data = byteArrayOf(
                0x1E, -116, -27, -76, -43, 0x62, 0x5C, 0x29,
                0x41, 0x2F
            ),
            nonce = byteArrayOf(
                0x3A, 0x56, -88, 0x47, -15, 0x29, -68, 0x5C,
                -7, 0x6E, 0x51, 0x21
            ),
            tag = byteArrayOf(
                0x6E, -30, 0x5F, -69, 0x52, 0x1D, 0x10, -117,
                -121, -77, 0x2D, -26, -88, -126, 0x2F, 0x2B
            )
        ),
        CredentialKey.APPLE_PRIVATE_KEY to EncryptedData(
            data = byteArrayOf(
                0x26, -17, 0x32, -96, -110, 0x14, -108, 0x1C,
                -80, 0x56, -58, -96, -93, 0x49, 0x36, 0x5A,
                -107, -84, 0x09, -70, 0x0D, -83, 0x2E, -123,
                -72, 0x34, -2, -52, 0x30, 0x48, -46, 0x21,
                0x5E, 0x4E, -56, -72, -47, -11, -19, -41,
                0x25, -127, 0x17, 0x5D, 0x75, 0x2D, -43, 0x64,
                0x7E, -4, -96, -113, 0x32, -100, 0x04, -128,
                -57, 0x29, -58, -66, 0x7A, -52, 0x5D, -121,
                -18, 0x64, -56, 0x28, 0x59, 0x46, 0x1C, 0x18,
                0x47, -55, -38, -14, -108, 0x37, 0x76, 0x2D,
                0x53, -3, 0x48, -31, 0x18, 0x1A, -76, -119,
                0x04, 0x6A, 0x44, 0x68, 0x18, 0x70, 0x67, -111,
                -60, 0x64, 0x13, -79, 0x32, 0x72, -111, 0x5C,
                -96, 0x4F, 0x78, 0x04, -112, 0x5A, 0x48, 0x24,
                -112, 0x74, 0x11, -91, 0x29, 0x79, 0x68, -50,
                -73, -89, -73, -61, -72, -40, -111, -40,
                -40, 0x16, 0x4E, -38, -52, 0x50, 0x50, 0x31,
                0x18, -5, -38, 0x5B, -2, -27, -24, 0x7C,
                0x48, -13, 0x4F, -107, 0x04, -42, 0x51, 0x13,
                0x22, 0x72, -117, -126, -22, -126, 0x5F, 0x79,
                0x26, -48, 0x03, 0x46, -52, 0x01, -109, -120,
                -112, 0x57, -28, 0x70, 0x67, 0x61, -114, -54,
                -49, -123, 0x1A, 0x36, -103, -64, 0x1A, -32,
                -70, -108, 0x42, 0x13, 0x6F, -96, 0x14, -67,
                0x27, -100, 0x0C, -84, 0x2D, 0x12, -21, 0x22,
                -114, 0x09, 0x57, 0x5B, 0x5A, 0x75, -119, -128,
                -9, 0x1B, 0x57, -80, 0x70, 0x2C, 0x1E, -120,
                -67, 0x19, 0x31, 0x2F, -122, -70, 0x0F, 0x5A,
                -27, -19, -85, 0x45, 0x15, -122, 0x2D, 0x2A,
                0x37, -76, -120, -22, -19, 0x5F, 0x15, 0x3D,
                -7, 0x56, 0x54, 0x1B, -17, -70, -121, -101,
                -41, 0x5D, -87, 0x04, -126, -98, 0x31, 0x30,
                -49
            ),
            nonce = byteArrayOf(
                0x19, 0x0C, -86, -15, -36, -35, -49, -73,
                0x51, -122, -87, -11
            ),
            tag = byteArrayOf(
                -99, -35, 0x5B, 0x0F, -76, 0x32, 0x43, -26,
                -66, -115, -88, -68, -91, 0x7D, -121, -124
            )
        ),
        CredentialKey.APPLE_TEAM_ID to EncryptedData(
            data = byteArrayOf(
                -104, 0x1E, 0x00, -51, 0x6B, 0x0E, 0x7A, -19,
                0x03, -30
            ),
            nonce = byteArrayOf(
                0x1D, -126, 0x0E, -103, -68, -31, -17, 0x7C,
                0x1B, -88, 0x2D, 0x4B
            ),
            tag = byteArrayOf(
                0x03, 0x2C, -101, -46, 0x49, 0x5B, 0x64, -10,
                0x3F, 0x6B, 0x75, 0x79, 0x45, 0x05, -67, 0x08
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_DEV to EncryptedData(
            data = byteArrayOf(
                0x18, -68, -21, 0x2D, -61, -4, 0x49, -58,
                0x72, -65, 0x5C, 0x5C, -68, 0x21, 0x75, 0x67,
                0x0A, 0x0B, -107, 0x2B
            ),
            nonce = byteArrayOf(
                -1, -73, -105, -16, 0x2A, 0x3F, 0x56, -80,
                -23, 0x1E, -105, -116
            ),
            tag = byteArrayOf(
                0x37, -19, -110, 0x2A, -69, 0x27, -111, -121,
                -20, 0x34, 0x55, -21, 0x55, 0x0A, -113, -36
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_PROD to EncryptedData(
            data = byteArrayOf(
                0x4A, -59, 0x42, -8, 0x08, -81, -103, 0x2C,
                -14, 0x67, -116, 0x77, -127, -50, -117, 0x37,
                0x1F, -11, -30, -63
            ),
            nonce = byteArrayOf(
                -74, -2, 0x4D, 0x35, -120, -69, 0x32, -81,
                0x1A, -10, -104, 0x4E
            ),
            tag = byteArrayOf(
                0x6E, -65, -80, 0x60, 0x17, -81, -96, -48,
                -126, 0x40, -80, 0x6C, -32, 0x35, 0x69, -4
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_STAGE to EncryptedData(
            data = byteArrayOf(
                -61, 0x1F, -19, 0x7A, 0x5E, 0x55, -18, 0x4D,
                -101, 0x5D, 0x39, 0x23, -123, 0x6C, 0x57, 0x7A,
                0x71, 0x29, -9, -8
            ),
            nonce = byteArrayOf(
                0x63, 0x01, -94, -119, 0x2F, -70, 0x0A, 0x0D,
                -15, -127, -34, -8
            ),
            tag = byteArrayOf(
                -20, 0x58, 0x67, 0x22, 0x2E, -117, -2, 0x09,
                0x52, -121, -3, -70, -7, -106, -118, -42
            )
        ),
        CredentialKey.AWS_REGION to EncryptedData(
            data = byteArrayOf(
                0x1E, 0x5F, -33, 0x54, -30, 0x63, 0x5F, -31,
                0x64
            ),
            nonce = byteArrayOf(
                -13, 0x3C, 0x54, -87, -60, 0x35, -78, 0x22,
                0x6F, -97, 0x34, -33
            ),
            tag = byteArrayOf(
                0x0E, 0x08, -102, 0x43, 0x64, 0x75, -35, -114,
                0x58, -54, -109, -27, -86, -128, 0x0E, 0x0F
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_DEV to EncryptedData(
            data = byteArrayOf(
                0x29, 0x2E, -114, -77, -84, -102, 0x7A, 0x0C,
                0x2F, 0x26, -95, 0x0C, 0x42, 0x7E, -45, -45,
                0x09, 0x3E, -117, -49, 0x1F, -106, -74, 0x3D,
                0x78, -29, 0x59, -79, -29, 0x67, -121, 0x4F,
                0x45, -113, -115, -120, -89, -110, -121, 0x07
            ),
            nonce = byteArrayOf(
                0x7A, -108, 0x63, -91, -99, 0x0C, 0x1A, 0x39,
                0x72, 0x1D, 0x31, 0x7A
            ),
            tag = byteArrayOf(
                0x44, 0x65, 0x47, -87, -35, 0x05, 0x38, -41,
                -12, 0x62, -84, 0x71, 0x53, 0x36, -118, 0x39
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_PROD to EncryptedData(
            data = byteArrayOf(
                -101, 0x01, -33, -38, -30, -10, 0x20, -75,
                0x62, -5, -126, 0x4F, -4, 0x1D, 0x6E, 0x77,
                -84, -83, 0x1C, 0x56, 0x11, 0x72, -42, 0x69,
                -9, 0x3A, 0x1D, 0x32, 0x49, -78, 0x6C, -113,
                -8, 0x62, 0x2E, 0x3F, -80, 0x43, 0x16, 0x25
            ),
            nonce = byteArrayOf(
                -31, -12, 0x5B, -76, 0x72, 0x26, 0x6C, -120,
                -126, -50, 0x33, 0x68
            ),
            tag = byteArrayOf(
                0x62, -21, -62, -113, 0x30, 0x14, 0x36, -66,
                -48, 0x4C, 0x7A, -87, -43, -81, 0x1B, -43
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_STAGE to EncryptedData(
            data = byteArrayOf(
                -83, 0x11, -32, -119, 0x3F, 0x08, -90, 0x71,
                -69, 0x60, 0x13, -36, 0x00, 0x54, -29, 0x79,
                -122, 0x37, -67, 0x04, -80, -76, -82, 0x16,
                -87, 0x3D, 0x6A, -51, 0x44, 0x1A, 0x1C, -27,
                -63, -77, 0x4B, -85, -106, 0x27, 0x5A, -34
            ),
            nonce = byteArrayOf(
                0x0A, -118, -103, -96, 0x77, -13, -53, 0x03,
                0x49, -114, -49, 0x13
            ),
            tag = byteArrayOf(
                -66, 0x69, 0x38, -53, -7, -109, 0x33, -28,
                -9, 0x41, 0x3A, 0x11, 0x76, -3, 0x36, 0x7C
            )
        ),
    )

    // Runtime decryption key (obfuscated)
    private val keyComponents = arrayOf(
        byteArrayOf(0x35, 0x02, -3, 0x63),
        byteArrayOf(0x52, -44, -74, 0x04),
        byteArrayOf(-105, -51, -70, -83),
        byteArrayOf(0x57, 0x25, -17, 0x68),
        byteArrayOf(-43, 0x6F, 0x57, -42),
        byteArrayOf(0x23, -28, -71, 0x4A),
        byteArrayOf(-9, 0x35, -43, -115),
        byteArrayOf(0x10, 0x36, 0x32, 0x6D),
    )

    @JvmStatic
    fun decrypt(key: CredentialKey): String? {
        val encrypted = encryptedData[key] ?: return null
        
        return try {
            // Reconstruct the decryption key
            val keyData = keyComponents.flatMap { it.toList() }.toByteArray()
            val secretKey = SecretKeySpec(keyData, "AES")
            
            // Setup cipher for AES-GCM
            val cipher = Cipher.getInstance("AES/GCM/NoPadding")
            val gcmSpec = GCMParameterSpec(128, encrypted.nonce)
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec)
            
            // Combine ciphertext and tag for decryption
            val cipherTextWithTag = encrypted.data + encrypted.tag
            val decrypted = cipher.doFinal(cipherTextWithTag)
            
            String(decrypted, Charsets.UTF_8)
        } catch (e: Exception) {
            null
        }
    }
    
    // Optional: Decrypt with caching
    private val cache = mutableMapOf<CredentialKey, String>()
    
    @JvmStatic
    fun decryptCached(key: CredentialKey): String? {
        cache[key]?.let { return it }
        
        val decrypted = decrypt(key) ?: return null
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    @JvmStatic
    fun clearCache() {
        cache.clear()
    }
}