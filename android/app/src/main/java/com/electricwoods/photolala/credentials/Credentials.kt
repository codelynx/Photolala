// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

package com.example.credentials

import javax.crypto.Cipher
import javax.crypto.spec.GCMParameterSpec
import javax.crypto.spec.SecretKeySpec

enum class CredentialKey {
    APPLE_BUNDLE_ID,
    APPLE_CLIENT_ID,
    APPLE_KEY_ID,
    APPLE_PRIVATE_KEY,
    APPLE_TEAM_ID,
    AWS_ACCESS_KEY_ID_DEV,
    AWS_ACCESS_KEY_ID_PROD,
    AWS_ACCESS_KEY_ID_STAGE,
    AWS_REGION,
    AWS_SECRET_ACCESS_KEY_DEV,
    AWS_SECRET_ACCESS_KEY_PROD,
    AWS_SECRET_ACCESS_KEY_STAGE,
}

object Credentials {
    private data class EncryptedData(
        val data: ByteArray,
        val nonce: ByteArray,
        val tag: ByteArray
    )
    
    // Encrypted credential data as byte arrays
    private val encryptedData = mapOf(
        CredentialKey.APPLE_BUNDLE_ID to EncryptedData(
            data = byteArrayOf(
                0x7F, -119, 0x6A, 0x2E, 0x5A, 0x58, 0x44, -3,
                0x5B, 0x22, 0x5A, -111, 0x64, -64, -65, -28,
                0x5B, -84, 0x68, 0x17, 0x44, -71, -106, 0x50,
                0x1E, 0x77, 0x42
            ),
            nonce = byteArrayOf(
                0x68, 0x36, 0x4D, 0x03, 0x66, 0x67, -117, -9,
                0x48, -62, -45, 0x44
            ),
            tag = byteArrayOf(
                -68, -104, 0x07, -104, 0x27, 0x7F, 0x75, -127,
                0x55, 0x60, -25, -91, 0x58, 0x13, 0x43, 0x3E
            )
        ),
        CredentialKey.APPLE_CLIENT_ID to EncryptedData(
            data = byteArrayOf(
                0x16, -49, 0x48, -71, -13, 0x37, 0x79, -124,
                0x2B, 0x02, -76, -41, 0x78, -35, 0x6D, 0x7A,
                0x22, -39, -70, 0x1A, -94, -108, -107, 0x5D,
                0x09, -23, -69, -21, 0x69, 0x42, -51, 0x0D,
                -103, 0x08, -68
            ),
            nonce = byteArrayOf(
                0x5F, -12, 0x0A, -102, -43, -111, 0x37, 0x08,
                -78, 0x15, -108, -17
            ),
            tag = byteArrayOf(
                0x1A, 0x4D, 0x2C, -64, 0x25, 0x7E, 0x15, 0x0D,
                -29, 0x21, -25, -62, -108, -30, -41, -93
            )
        ),
        CredentialKey.APPLE_KEY_ID to EncryptedData(
            data = byteArrayOf(
                -44, 0x5F, 0x33, -17, -26, -28, -100, -69,
                -16, -78
            ),
            nonce = byteArrayOf(
                0x19, 0x11, 0x5A, -97, -55, -120, 0x04, 0x2F,
                -11, 0x55, 0x34, 0x45
            ),
            tag = byteArrayOf(
                -110, 0x2F, 0x5E, -6, -73, 0x15, -20, 0x56,
                0x61, -53, -21, -44, -14, 0x40, 0x43, 0x7E
            )
        ),
        CredentialKey.APPLE_PRIVATE_KEY to EncryptedData(
            data = byteArrayOf(
                0x25, -62, 0x7D, -56, -66, -122, -6, 0x2E,
                0x3A, 0x19, 0x07, 0x4B, 0x22, 0x73, -52, -29,
                0x24, 0x31, -41, -76, -127, 0x5C, 0x6A, -14,
                -85, 0x5F, 0x0D, -34, 0x65, -127, 0x7A, -93,
                0x5A, 0x51, -107, -62, -110, 0x4F, 0x5F, 0x74,
                -78, 0x7B, 0x24, 0x30, -53, -77, -126, 0x3C,
                -54, -103, 0x5D, 0x74, -40, 0x16, 0x41, 0x26,
                -73, -59, -75, -47, -121, 0x3D, -47, -78,
                -34, 0x36, -39, 0x7B, -21, -57, 0x51, -80,
                -84, 0x7F, -32, -67, -107, -37, 0x61, 0x00,
                0x78, -90, 0x25, -119, 0x3B, 0x33, 0x4D, 0x7F,
                0x46, 0x7C, 0x32, 0x4C, 0x78, -17, 0x49, -126,
                0x73, 0x74, -127, 0x19, -94, -109, -25, -17,
                0x6F, -16, -77, -29, -114, 0x58, 0x59, 0x1D,
                -20, 0x63, 0x7A, 0x0E, -28, -35, -57, -119,
                -14, -74, 0x27, 0x19, -117, 0x00, -28, -119,
                0x50, -120, 0x5F, -39, -125, -122, 0x4D, 0x12,
                0x2A, 0x50, 0x57, -106, -98, 0x21, 0x4D, 0x34,
                -124, 0x0F, -103, 0x21, 0x0A, 0x3F, -56, -100,
                -7, -87, -13, -19, 0x61, 0x5C, -34, -26,
                0x0E, -107, 0x2A, 0x49, -16, -87, -109, -52,
                -2, 0x45, -34, -83, -48, -105, -114, 0x1A,
                0x44, -101, -48, -12, -84, -61, 0x1A, -119,
                0x6E, -15, -52, 0x26, -68, 0x6C, 0x5C, 0x53,
                0x17, 0x09, -102, 0x4C, 0x69, 0x79, -30, 0x10,
                -69, 0x5A, -63, -24, 0x67, -35, -66, 0x02,
                0x08, 0x45, -126, -82, -112, 0x0A, 0x51, 0x76,
                -31, -50, 0x57, 0x39, 0x64, -58, -15, -15,
                0x32, 0x26, 0x47, -27, -124, -53, 0x3B, 0x47,
                0x07, 0x38, -50, -33, 0x67, -76, -30, 0x50,
                0x60, -106, 0x00, -73, -123, -53, 0x69, 0x0F,
                0x33, -11, 0x31, 0x2F, -42, 0x21, 0x16, 0x73,
                0x6B
            ),
            nonce = byteArrayOf(
                0x51, -121, 0x0C, 0x22, 0x28, 0x49, -121, -105,
                0x25, -86, -75, 0x2B
            ),
            tag = byteArrayOf(
                -48, 0x09, -57, -93, 0x6C, 0x5A, 0x1D, 0x7C,
                0x55, 0x33, -88, 0x30, 0x24, 0x18, -108, 0x1D
            )
        ),
        CredentialKey.APPLE_TEAM_ID to EncryptedData(
            data = byteArrayOf(
                0x73, -3, 0x4A, -64, 0x60, 0x67, 0x53, 0x79,
                0x24, 0x7E
            ),
            nonce = byteArrayOf(
                -121, -22, -27, -119, -111, -117, 0x02, 0x23,
                -84, 0x1D, 0x30, 0x10
            ),
            tag = byteArrayOf(
                0x29, -24, -12, 0x56, 0x68, -103, -2, -9,
                0x0C, 0x5F, -28, 0x50, 0x23, -25, -109, -91
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_DEV to EncryptedData(
            data = byteArrayOf(
                0x44, -90, -56, -1, 0x46, 0x35, -46, -25,
                0x5F, -57, 0x00, -107, 0x7C, 0x36, -77, 0x4D,
                0x36, 0x20, 0x2C, -74
            ),
            nonce = byteArrayOf(
                -65, -53, 0x5E, -31, 0x0B, -48, 0x5F, -16,
                0x25, 0x26, -70, 0x48
            ),
            tag = byteArrayOf(
                -48, -34, 0x7F, -77, 0x0E, 0x1B, 0x22, -83,
                0x2D, 0x51, 0x63, -112, -30, -13, 0x41, 0x29
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_PROD to EncryptedData(
            data = byteArrayOf(
                -34, -29, 0x29, -100, -24, 0x17, -97, 0x09,
                0x2D, -117, 0x55, 0x3E, -115, -119, -103, 0x54,
                -100, -107, 0x10, -127
            ),
            nonce = byteArrayOf(
                -69, 0x76, -80, -116, 0x4B, 0x41, -116, 0x27,
                0x49, -38, 0x03, -10
            ),
            tag = byteArrayOf(
                0x25, -94, -1, -100, -109, -101, 0x35, -66,
                -74, 0x5C, -75, -20, 0x3A, -33, 0x64, 0x33
            )
        ),
        CredentialKey.AWS_ACCESS_KEY_ID_STAGE to EncryptedData(
            data = byteArrayOf(
                0x3E, -10, 0x11, 0x3C, -25, -114, 0x17, 0x53,
                0x06, 0x67, -86, 0x35, -14, -55, -10, -95,
                0x41, 0x19, 0x45, -113
            ),
            nonce = byteArrayOf(
                0x10, -82, 0x7C, 0x13, -36, -43, 0x20, 0x67,
                -125, 0x1E, -108, 0x5D
            ),
            tag = byteArrayOf(
                -100, 0x67, 0x0A, -121, -17, -69, 0x21, -29,
                0x40, -35, -22, 0x21, 0x07, -128, -121, 0x09
            )
        ),
        CredentialKey.AWS_REGION to EncryptedData(
            data = byteArrayOf(
                0x1F, 0x39, 0x32, 0x2E, -3, 0x45, 0x1E, 0x19,
                -5
            ),
            nonce = byteArrayOf(
                -11, 0x2E, -36, -42, 0x50, 0x56, -64, 0x13,
                0x28, -5, -127, -57
            ),
            tag = byteArrayOf(
                -40, 0x17, 0x4D, 0x4A, 0x4E, 0x1D, 0x6D, 0x0F,
                -114, -81, 0x21, -15, 0x09, 0x12, 0x22, 0x38
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_DEV to EncryptedData(
            data = byteArrayOf(
                0x61, -37, -39, -50, 0x43, 0x60, 0x71, 0x40,
                -99, -101, 0x0D, -39, 0x24, 0x19, 0x5F, -56,
                -37, -15, -124, -44, -41, -47, 0x17, -3,
                -82, 0x2B, 0x43, 0x26, -81, 0x69, 0x20, -18,
                0x36, -33, 0x76, 0x65, -11, 0x02, -19, -113
            ),
            nonce = byteArrayOf(
                -91, -83, 0x05, -3, 0x1E, -120, 0x5D, 0x5A,
                -108, -25, 0x30, 0x59
            ),
            tag = byteArrayOf(
                0x45, 0x54, -98, -31, -112, 0x5E, 0x41, -115,
                0x3C, 0x0B, 0x60, 0x75, 0x72, -81, -120, 0x48
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_PROD to EncryptedData(
            data = byteArrayOf(
                -123, -108, 0x2D, -39, 0x70, -125, -113, -117,
                0x31, 0x0C, 0x47, 0x0E, 0x74, 0x0D, -65, 0x75,
                -109, -13, 0x7D, -127, -28, 0x53, -127, -117,
                0x4F, -62, -74, -36, -55, -107, -81, 0x4D,
                -19, -15, 0x34, 0x69, 0x24, -44, 0x2A, 0x69
            ),
            nonce = byteArrayOf(
                -92, -94, 0x01, 0x46, 0x06, 0x5D, 0x7D, -44,
                -49, 0x2E, 0x6D, -57
            ),
            tag = byteArrayOf(
                0x34, 0x20, 0x4D, -25, -52, 0x6A, -48, -60,
                0x31, 0x06, 0x6D, 0x1F, 0x1C, 0x7F, -109, 0x51
            )
        ),
        CredentialKey.AWS_SECRET_ACCESS_KEY_STAGE to EncryptedData(
            data = byteArrayOf(
                0x50, -110, 0x48, -21, -91, -2, 0x51, 0x7C,
                0x49, -106, 0x69, -88, -10, -92, -55, -126,
                0x2E, 0x0B, 0x43, -86, 0x7D, -117, 0x19, 0x08,
                -50, 0x1E, 0x3B, 0x23, -103, -111, 0x67, -54,
                0x5E, -127, 0x65, 0x3D, 0x04, -104, -74, -99
            ),
            nonce = byteArrayOf(
                0x65, -108, -57, 0x35, 0x43, 0x46, -6, 0x12,
                -86, -100, -32, -56
            ),
            tag = byteArrayOf(
                -93, -15, 0x79, -106, 0x78, 0x11, -124, 0x42,
                -40, 0x4F, 0x4D, 0x72, 0x02, 0x07, -39, 0x26
            )
        ),
    )

    // Runtime decryption key (obfuscated)
    private val keyComponents = arrayOf(
        byteArrayOf(0x4A, -9, -96, 0x70),
        byteArrayOf(0x33, -95, -41, -74),
        byteArrayOf(0x56, -8, 0x5C, 0x1C),
        byteArrayOf(-34, 0x55, -82, 0x58),
        byteArrayOf(-62, 0x4C, 0x19, 0x2C),
        byteArrayOf(-50, -47, -19, 0x2D),
        byteArrayOf(0x3B, 0x6E, -111, 0x29),
        byteArrayOf(-15, 0x1F, -4, 0x5A),
    )

    @JvmStatic
    fun decrypt(key: CredentialKey): String? {
        val encrypted = encryptedData[key] ?: return null
        
        return try {
            // Reconstruct the decryption key
            val keyData = keyComponents.flatMap { it.toList() }.toByteArray()
            val secretKey = SecretKeySpec(keyData, "AES")
            
            // Setup cipher for AES-GCM
            val cipher = Cipher.getInstance("AES/GCM/NoPadding")
            val gcmSpec = GCMParameterSpec(128, encrypted.nonce)
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec)
            
            // Combine ciphertext and tag for decryption
            val cipherTextWithTag = encrypted.data + encrypted.tag
            val decrypted = cipher.doFinal(cipherTextWithTag)
            
            String(decrypted, Charsets.UTF_8)
        } catch (e: Exception) {
            null
        }
    }
    
    // Optional: Decrypt with caching
    private val cache = mutableMapOf<CredentialKey, String>()
    
    @JvmStatic
    fun decryptCached(key: CredentialKey): String? {
        cache[key]?.let { return it }
        
        val decrypted = decrypt(key) ?: return null
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    @JvmStatic
    fun clearCache() {
        cache.clear()
    }
}